(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var TStringBuilder = (function () {
    function TStringBuilder() {
        var _this = this;
        this._buffer = [];
        this.append = function (line) {
            console.log(line);
            _this._buffer.push(line);
            return _this;
        };
        this.cr = function () {
            _this.append("\n");
            return _this;
        };
        this.toString = function () {
            return _this._buffer.join("");
        };
    }
    return TStringBuilder;
})();
exports.TStringBuilder = TStringBuilder;
function html_encode(val) {
    // TODO
    return val;
}
function quote_af(val) {
    return '"' + val + '"';
}
function fmt_attr(attr) {
    return attr.name + "=" + quote_af(html_encode(attr.value));
}
function fmt_attrs(sb, attrs) {
    var first = true;
    attrs.forEach(function (attr) {
        if (!first) {
            sb.append(" ");
        }
        else {
            first = false;
        }
        // <a href="$menuItem.href$" id="$menuItem.id$">$menuItem.caption$</a>
        sb.append(fmt_attr(attr));
    });
}
// def fill_sb_with_tag (sb, tag, attrs, arr_fn_on_inner, cbData, with_end_tag=True):
function fill_sb_with_tag(sb, tag, o) {
    o.with_end_tag = o.with_end_tag || true;
    sb.append("<" + tag);
    //    if attrs is None:
    if (!o.attrs) {
        sb.append(">").cr();
    }
    else {
        sb.append(" ");
        fmt_attrs(sb, o.attrs);
        sb.append(">").cr();
    }
    //    for fn_on_inner in arr_fn_on_inner:
    if ((o.arr_fn_on_inner)) {
        o.arr_fn_on_inner.forEach(function (fn) {
            if (fn) {
                fn(sb, o.cbData);
            }
        });
    }
    //    if with_end_tag:
    //        sb.append("<%s/>" % tag)
    if (o.innerHtml) {
        sb.append(o.innerHtml).cr();
    }
    if (o.with_end_tag) {
        sb.append("</" + tag + ">").cr();
    }
}
exports.fill_sb_with_tag = fill_sb_with_tag;
function create_attr_class(class_name) {
    return { name: "class", value: class_name };
}
exports.create_attr_class = create_attr_class;
function create_attr_id(html_id) {
    return { name: "id", value: html_id };
}
exports.create_attr_id = create_attr_id;
function create_attr(name, value) {
    return { name: name, value: value };
}
exports.create_attr = create_attr;
function create_attrs(arr) {
    var i = 0, l = arr.length;
    var ret = [];
    for (i = 0; i < l; i += 2) {
        ret.push(create_attr(arr[i], arr[i + 1]));
    }
    return ret;
}
exports.create_attrs = create_attrs;
//def create_css_include (sb, attrs,href):
function create_css_include(sb, attrs, href) {
    // <link type="text/css" rel="stylesheet" href="du_export.css">
    var attrs = (create_attrs([
        "type", "text/css",
        "rel", "stylesheet",
        "href", href]));
    //    print attrs
    fill_sb_with_tag(sb, "link", {
        attr: attrs,
        with_end_tag: false
    });
}
},{}],2:[function(require,module,exports){
function exportNsObj(libName, objName, obj) {
    var dkm_libName = "dkm_" + libName;
    if (typeof window[dkm_libName] != "Object") {
        window[dkm_libName] = {};
    }
    if (typeof window[dkm_libName][objName] != "Object") {
        window[dkm_libName][objName] = obj;
    }
}
exports.exportNsObj = exportNsObj;
},{}],3:[function(require,module,exports){
var hbuild = require("./hbuild");
var nameSpaceExport = require("dkmlib/generic/nameSpaceExport");
function buildSelectOptsAttrs(opts) {
    var attrs = [];
    var keys = Object.keys(opts);
    keys.forEach(function (key) {
        if (typeof opts[key] !== "undefined") {
            attrs.push({
                name: key,
                value: opts[key]
            });
        }
    });
    return attrs;
}
function createSelectOpts(opts) {
    hbuild.fill_sb_with_tag(opts.sb, "option", {
        attrs: buildSelectOptsAttrs(opts.attrs),
        innerHtml: opts.displayField
    });
}
exports.createSelectOpts = createSelectOpts;
function createSelect(opts) {
    function buildSelopts(sb, cbData) {
        cbData.forEach(function (row) {
            createSelectOpts({
                attrs: {
                    value: row[opts.valueField],
                    selected: opts.selectedVal === row[opts.valueField]
                },
                displayField: row[opts.displayField],
                sb: sb
            });
        });
    }
    function buildFirstRow(sb, dbData) {
        createSelectOpts({
            attrs: {
                value: opts.firstRows.value,
                selected: opts.displayField == opts.selectedVal
            },
            displayField: opts.firstRows.caption,
            sb: sb
        });
    }
    hbuild.fill_sb_with_tag(opts.sb, "select", {
        attrs: opts.attrs,
        arr_fn_on_inner: [buildSelopts],
        cbData: opts.data
    });
}
exports.createSelect = createSelect;
nameSpaceExport.exportNsObj("dkmlib", "selectBuild", {
    createSelect: createSelect
});
},{"./hbuild":1,"dkmlib/generic/nameSpaceExport":2}],4:[function(require,module,exports){
/// <reference path="../../generic/hbuild.ts" />
/// <reference path="../../external/jquery.d.ts" />
var hbuild = require("dkmlib/generic/hbuild");
function test_menu() {
    var j_content = $("#content");
    var sb = new hbuild.TStringBuilder();
    function a(sb, cbData) {
        //<a href="$menuItem.href$" id= "$menuItem.id$" > $menuItem.caption$ < /a>
        var hrefAttrs = hbuild.create_attrs(["href", cbData.href, "id", cbData.id]);
        hbuild.fill_sb_with_tag(sb, "a", {
            attrs: hrefAttrs,
            innerHtml: cbData.caption
        });
    }
    function lis(sb, cbData) {
        var i = 0;
        for (i = 0; i < 10; i++) {
            hbuild.fill_sb_with_tag(sb, "li", {
                cbData: {
                    href: "#",
                    id: "li" + i,
                    caption: "Item " + (i + 1)
                },
                arr_fn_on_inner: [a]
            });
        }
    }
    hbuild.fill_sb_with_tag(sb, "ul", {
        arr_fn_on_inner: [lis]
    });
    var html = sb.toString();
    console.log(html);
    $("#zeige_html").val(html);
    window.document.getElementById("content").innerHTML = html;
}
function sanitizeHTML(s) {
    var d = document.createElement('div');
    d.appendChild(document.createTextNode(s));
    return d.innerHTML;
}
function start() {
    $(document).ready(function () {
        test_menu();
    });
}
exports.start = start;
},{"dkmlib/generic/hbuild":1}],5:[function(require,module,exports){
var hbuild_test = require("./hbuild_test");
var selectBuild = require("./selectBuild_test");
hbuild_test.start();
selectBuild.start();
},{"./hbuild_test":4,"./selectBuild_test":6}],6:[function(require,module,exports){
/**
 * Created by michael on 04.08.2015.
 */
/// <reference path="../../external/jquery.d.ts" />
var selectBuild = require("dkmlib/generic/selectBuild");
var hbuild = require("dkmlib/generic/hbuild");
function cbxTest() {
    var data = [
        { nr: "1", mname: "Michael" },
        { nr: "2", mname: "Monika" },
        { nr: "3", mname: "Anna" },
    ];
    var sb = new hbuild.TStringBuilder();
    selectBuild.createSelect({
        data: data,
        valueField: "nr",
        displayField: "mname",
        /* firstRows?: ISelectOpt;
     attrs?: hbuild.IAttribute[];*/
        selectedVal: "1",
        sb: sb
    });
    var html = sb.toString();
    window.document.getElementById("selectResult").innerHTML = html;
}
function start() {
    $(document).ready(function () {
        cbxTest();
    });
}
exports.start = start;
},{"dkmlib/generic/hbuild":1,"dkmlib/generic/selectBuild":3}]},{},[5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
