(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var TStringBuilder = (function () {
    function TStringBuilder() {
        var _this = this;
        this._buffer = [];
        this.append = function (line) {
            console.log(line);
            _this._buffer.push(line);
            return _this;
        };
        this.cr = function () {
            _this.append("\n");
            return _this;
        };
        this.toString = function () {
            return _this._buffer.join("");
        };
    }
    return TStringBuilder;
})();
exports.TStringBuilder = TStringBuilder;
function html_encode(val) {
    // TODO
    return val;
}
function quote_af(val) {
    return '"' + val + '"';
}
function fmt_attr(attr) {
    return attr.name + "=" + quote_af(html_encode(attr.value));
}
function fmt_attrs(sb, attrs) {
    var first = true;
    attrs.forEach(function (attr) {
        if (!first) {
            sb.append(" ");
        }
        else {
            first = false;
        }
        // <a href="$menuItem.href$" id="$menuItem.id$">$menuItem.caption$</a>
        sb.append(fmt_attr(attr));
    });
}
// def fill_sb_with_tag (sb, tag, attrs, arr_fn_on_inner, cbData, with_end_tag=True):
function fill_sb_with_tag(sb, tag, o) {
    o.with_end_tag = o.with_end_tag || true;
    sb.append("<" + tag);
    //    if attrs is None:
    if (!o.attrs) {
        sb.append(">").cr();
    }
    else {
        sb.append(" ");
        fmt_attrs(sb, o.attrs);
        sb.append(">").cr();
    }
    //    for fn_on_inner in arr_fn_on_inner:
    if ((o.arr_fn_on_inner)) {
        o.arr_fn_on_inner.forEach(function (fn) {
            if (fn) {
                fn(sb, o.cbData);
            }
        });
    }
    //    if with_end_tag:
    //        sb.append("<%s/>" % tag)
    if (o.innerHtml) {
        sb.append(o.innerHtml).cr();
    }
    if (o.with_end_tag) {
        sb.append("</" + tag + ">").cr();
    }
}
exports.fill_sb_with_tag = fill_sb_with_tag;
function create_attr_class(class_name) {
    return { name: "class", value: class_name };
}
exports.create_attr_class = create_attr_class;
function create_attr_id(html_id) {
    return { name: "id", value: html_id };
}
exports.create_attr_id = create_attr_id;
function create_attr(name, value) {
    return { name: name, value: value };
}
exports.create_attr = create_attr;
function create_attrs(arr) {
    var i = 0, l = arr.length;
    var ret = [];
    for (i = 0; i < l; i += 2) {
        ret.push(create_attr(arr[i], arr[i + 1]));
    }
    return ret;
}
exports.create_attrs = create_attrs;
//def create_css_include (sb, attrs,href):
function create_css_include(sb, attrs, href) {
    // <link type="text/css" rel="stylesheet" href="du_export.css">
    var attrs = (create_attrs([
        "type", "text/css",
        "rel", "stylesheet",
        "href", href]));
    //    print attrs
    fill_sb_with_tag(sb, "link", {
        attr: attrs,
        with_end_tag: false
    });
}
},{}],2:[function(require,module,exports){
/// <reference path="../../generic/hbuild.ts" />
/// <reference path="../../external/jquery.d.ts" />
var hbuild = require("dkmlib/generic/hbuild");
function test_menu() {
    var j_content = $("#content");
    var sb = new hbuild.TStringBuilder();
    function a(sb, cbData) {
        //<a href="$menuItem.href$" id= "$menuItem.id$" > $menuItem.caption$ < /a>
        var hrefAttrs = hbuild.create_attrs(["href", cbData.href, "id", cbData.id]);
        hbuild.fill_sb_with_tag(sb, "a", {
            attrs: hrefAttrs,
            innerHtml: cbData.caption
        });
    }
    function lis(sb, cbData) {
        var i = 0;
        for (i = 0; i < 10; i++) {
            hbuild.fill_sb_with_tag(sb, "li", {
                cbData: {
                    href: "#",
                    id: "li" + i,
                    caption: "Item " + (i + 1)
                },
                arr_fn_on_inner: [a]
            });
        }
    }
    hbuild.fill_sb_with_tag(sb, "ul", {
        arr_fn_on_inner: [lis]
    });
    var html = sb.toString();
    console.log(html);
    $("#zeige_html").val(html);
    document.getElementById("content").innerHTML = html;
}
function sanitizeHTML(s) {
    var d = document.createElement('div');
    d.appendChild(document.createTextNode(s));
    return d.innerHTML;
}
function start() {
    test_menu();
}
exports.start = start;
},{"dkmlib/generic/hbuild":1}],3:[function(require,module,exports){
var hbuild_test = require("./hbuild_test");
hbuild_test.start();
},{"./hbuild_test":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJka21saWIvZ2VuZXJpYy9oYnVpbGQudHMiLCJka21saWIvdGVzdC9nZW5lcmljL2hidWlsZF90ZXN0LnRzIiwiZGttbGliL3Rlc3QvZ2VuZXJpYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ01BO0lBQUE7UUFBQSxpQkFtQkM7UUFsQkcsWUFBTyxHQUFhLEVBQUUsQ0FBQztRQUd2QixXQUFNLEdBQXNDLFVBQUMsSUFBSTtZQUM3QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xCLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxLQUFJLENBQUM7UUFDaEIsQ0FBQyxDQUFBO1FBRUQsT0FBRSxHQUF1QjtZQUNyQixLQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sQ0FBQyxLQUFJLENBQUM7UUFDaEIsQ0FBQyxDQUFBO1FBRUQsYUFBUSxHQUFjO1lBQ2xCLE1BQU0sQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUE7SUFFTCxDQUFDO0lBQUQscUJBQUM7QUFBRCxDQW5CQSxBQW1CQyxJQUFBO0FBbkJZLHNCQUFjLGlCQW1CMUIsQ0FBQTtBQUVELHFCQUFxQixHQUFXO0lBQzVCLEFBQ0EsT0FETztJQUNQLE1BQU0sQ0FBQyxHQUFHLENBQUE7QUFDZCxDQUFDO0FBR0Qsa0JBQWtCLEdBQVc7SUFDekIsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFBO0FBQzFCLENBQUM7QUFRRCxrQkFBa0IsSUFBZ0I7SUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLFFBQVEsQ0FBQyxXQUFX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QUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7QUFFeEQsQ0FBQztBQUVELHNCQUFzQixDQUFDO0lBQ25CLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDdkIsQ0FBQztBQUVEO0lBQ0ksU0FBUyxFQUFFLENBQUM7QUFDaEIsQ0FBQztBQUZlLGFBQUssUUFFcEIsQ0FBQTs7QUM1REEsSUFBTyxXQUFXLFdBQVcsZUFBZSxDQUFDLENBQUM7QUFFL0MsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIu+7v2V4cG9ydCBpbnRlcmZhY2UgSVN0cmluZ0J1aWxkZXIge1xyXG4gICAgYXBwZW5kOiAobGluZTogc3RyaW5nKSA9PiBJU3RyaW5nQnVpbGRlcjtcclxuICAgIGNyOiAoKSA9PiBJU3RyaW5nQnVpbGRlcjtcclxuICAgIHRvU3RyaW5nOigpPT4gc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVFN0cmluZ0J1aWxkZXIgaW1wbGVtZW50cyBJU3RyaW5nQnVpbGRlciB7XHJcbiAgICBfYnVmZmVyOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuXHJcbiAgICBhcHBlbmQ6ICgobGluZTogc3RyaW5nKT0+IElTdHJpbmdCdWlsZGVyKSA9IChsaW5lKT0+ICB7XHJcbiAgICAgICAgY29uc29sZS5sb2cobGluZSk7XHJcbiAgICAgICAgdGhpcy5fYnVmZmVyLnB1c2gobGluZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgY3I6KCk9PiBJU3RyaW5nQnVpbGRlciA9ICgpID0+ICB7XHJcbiAgICAgICAgdGhpcy5hcHBlbmQoXCJcXG5cIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgdG9TdHJpbmc6KCk9PnN0cmluZyA9ICgpPT4gIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYnVmZmVyLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBodG1sX2VuY29kZSh2YWw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAvLyBUT0RPXHJcbiAgICByZXR1cm4gdmFsXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBxdW90ZV9hZih2YWw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gJ1wiJyArIHZhbCArICdcIidcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQXR0cmlidXRlIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHZhbHVlOiBzdHJpbmc7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBmbXRfYXR0cihhdHRyOiBJQXR0cmlidXRlKSB7XHJcbiAgICByZXR1cm4gYXR0ci5uYW1lICsgXCI9XCIgKyBxdW90ZV9hZihodG1sX2VuY29kZShhdHRyLnZhbHVlKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZtdF9hdHRycyhzYjogSVN0cmluZ0J1aWxkZXIsIGF0dHJzOiBJQXR0cmlidXRlW10pOiB2b2lkIHtcclxuICAgIHZhciBmaXJzdCA9IHRydWU7XHJcbiAgICBhdHRycy5mb3JFYWNoKChhdHRyOiBJQXR0cmlidXRlKSA9PiB7XHJcbiAgICAgICAgaWYgKCFmaXJzdCkge1xyXG4gICAgICAgICAgICBzYi5hcHBlbmQoXCIgXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4vLyA8YSBocmVmPVwiJG1lbnVJdGVtLmhyZWYkXCIgaWQ9XCIkbWVudUl0ZW0uaWQkXCI+JG1lbnVJdGVtLmNhcHRpb24kPC9hPlxyXG4gICAgICAgIHNiLmFwcGVuZChmbXRfYXR0cihhdHRyKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSWZuT25Jbm5lciB7IChzYjogSVN0cmluZ0J1aWxkZXIsIGNiRGF0YTogYW55KTp2b2lkfVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJRmlsbF9zYl93aXRoX3RhZ19vcHRzIHtcclxuICAgIGF0dHJzPzogSUF0dHJpYnV0ZVtdO1xyXG4gICAgYXJyX2ZuX29uX2lubmVyPzogSWZuT25Jbm5lcltdO1xyXG4gICAgY2JEYXRhPzogYW55O1xyXG4gICAgd2l0aF9lbmRfdGFnPzogYm9vbGVhbjtcclxuICAgIGlubmVySHRtbD86IHN0cmluZztcclxufVxyXG5cclxuLy8gZGVmIGZpbGxfc2Jfd2l0aF90YWcgKHNiLCB0YWcsIGF0dHJzLCBhcnJfZm5fb25faW5uZXIsIGNiRGF0YSwgd2l0aF9lbmRfdGFnPVRydWUpOlxyXG5leHBvcnQgZnVuY3Rpb24gZmlsbF9zYl93aXRoX3RhZyhzYjpJU3RyaW5nQnVpbGRlciwgdGFnOnN0cmluZywgbzpJRmlsbF9zYl93aXRoX3RhZ19vcHRzKTogdm9pZCB7XHJcblxyXG4gICAgby53aXRoX2VuZF90YWcgPSBvLndpdGhfZW5kX3RhZyB8fCB0cnVlO1xyXG4gICAgc2IuYXBwZW5kKFwiPFwiICsgdGFnKTtcclxuLy8gICAgaWYgYXR0cnMgaXMgTm9uZTpcclxuICAgIGlmICghby5hdHRycykge1xyXG4gICAgICAgIHNiLmFwcGVuZChcIj5cIikuY3IoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2IuYXBwZW5kKFwiIFwiKTtcclxuICAgICAgICBmbXRfYXR0cnMoc2IsIG8uYXR0cnMpO1xyXG4gICAgICAgIHNiLmFwcGVuZChcIj5cIikuY3IoKTtcclxuICAgIH1cclxuLy8gICAgZm9yIGZuX29uX2lubmVyIGluIGFycl9mbl9vbl9pbm5lcjpcclxuICAgIGlmICgoby5hcnJfZm5fb25faW5uZXIpICkge1xyXG4gICAgICAgIG8uYXJyX2ZuX29uX2lubmVyLmZvckVhY2goKGZuKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChmbikge1xyXG4gICAgICAgICAgICAgICAgZm4oc2IsIG8uY2JEYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4vLyAgICBpZiB3aXRoX2VuZF90YWc6XHJcbi8vICAgICAgICBzYi5hcHBlbmQoXCI8JXMvPlwiICUgdGFnKVxyXG4gICAgaWYgKG8uaW5uZXJIdG1sKSB7XHJcbiAgICAgICAgc2IuYXBwZW5kKG8uaW5uZXJIdG1sKS5jcigpO1xyXG4gICAgfVxyXG4gICAgaWYgKG8ud2l0aF9lbmRfdGFnKSB7XHJcbiAgICAgICAgc2IuYXBwZW5kKFwiPC9cIiArIHRhZyArIFwiPlwiKS5jcigpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfYXR0cl9jbGFzcyhjbGFzc19uYW1lOiBzdHJpbmcpOiBJQXR0cmlidXRlIHtcclxuICAgIHJldHVybiB7IG5hbWU6XCJjbGFzc1wiLCB2YWx1ZTpjbGFzc19uYW1lIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfYXR0cl9pZChodG1sX2lkOiBzdHJpbmcpOiBJQXR0cmlidXRlIHtcclxuICAgIHJldHVybiB7IG5hbWU6IFwiaWRcIiwgdmFsdWU6IGh0bWxfaWR9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlX2F0dHIobmFtZTpzdHJpbmcsIHZhbHVlOnN0cmluZyk6IElBdHRyaWJ1dGUge1xyXG4gICAgcmV0dXJuIHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfYXR0cnMoYXJyOiBzdHJpbmdbXSk6SUF0dHJpYnV0ZVtdIHtcclxuICAgIHZhciBpID0gMCwgbCA9IGFyci5sZW5ndGg7XHJcbiAgICB2YXIgcmV0OiBJQXR0cmlidXRlW10gPSBbXTtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDIpIHtcclxuICAgICAgICByZXQucHVzaChjcmVhdGVfYXR0cihhcnJbaV0sIGFycltpICsgMV0pKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuXHJcblxyXG4vL2RlZiBjcmVhdGVfY3NzX2luY2x1ZGUgKHNiLCBhdHRycyxocmVmKTpcclxuZnVuY3Rpb24gY3JlYXRlX2Nzc19pbmNsdWRlKHNiOiBJU3RyaW5nQnVpbGRlciwgYXR0cnM6IElBdHRyaWJ1dGVbXSwgaHJlZjogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAvLyA8bGluayB0eXBlPVwidGV4dC9jc3NcIiByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cImR1X2V4cG9ydC5jc3NcIj5cclxuICAgIHZhciBhdHRycyA9IChjcmVhdGVfYXR0cnMoW1xyXG4gICAgICAgIFwidHlwZVwiLCBcInRleHQvY3NzXCIsXHJcbiAgICAgICAgXCJyZWxcIiwgXCJzdHlsZXNoZWV0XCIsXHJcbiAgICAgICAgXCJocmVmXCIsIGhyZWZdKSk7XHJcbiAgICAvLyAgICBwcmludCBhdHRyc1xyXG4gICAgZmlsbF9zYl93aXRoX3RhZyhzYiwgXCJsaW5rXCIsIHtcclxuICAgICAgICBhdHRyOiBhdHRycyxcclxuICAgICAgICB3aXRoX2VuZF90YWc6ZmFsc2VcclxuICAgIH0pO1xyXG5cclxuXHJcbn1cclxuXHJcblxyXG5cclxuIiwi77u/Ly8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2dlbmVyaWMvaGJ1aWxkLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL2V4dGVybmFsL2pxdWVyeS5kLnRzXCIgLz5cclxuXHJcbmltcG9ydCBoYnVpbGQgPSByZXF1aXJlKFwiZGttbGliL2dlbmVyaWMvaGJ1aWxkXCIpO1xyXG5cclxuZnVuY3Rpb24gdGVzdF9tZW51KCkge1xyXG4gICAgdmFyIGpfY29udGVudCA9ICQoXCIjY29udGVudFwiKTtcclxuXHJcbiAgICB2YXIgc2I6IGhidWlsZC5UU3RyaW5nQnVpbGRlciA9IG5ldyBoYnVpbGQuVFN0cmluZ0J1aWxkZXIoKTtcclxuXHJcblxyXG4gICAgZnVuY3Rpb24gYShzYiwgY2JEYXRhKSB7XHJcbiAgICAgICAgLy88YSBocmVmPVwiJG1lbnVJdGVtLmhyZWYkXCIgaWQ9IFwiJG1lbnVJdGVtLmlkJFwiID4gJG1lbnVJdGVtLmNhcHRpb24kIDwgL2E+XHJcbiAgICAgICAgdmFyIGhyZWZBdHRyczogaGJ1aWxkLklBdHRyaWJ1dGVbXSA9XHJcbiAgICAgICAgICAgIGhidWlsZC5jcmVhdGVfYXR0cnMoW1wiaHJlZlwiLCBjYkRhdGEuaHJlZiwgXCJpZFwiLCBjYkRhdGEuaWRdKTtcclxuXHJcbiAgICAgICAgaGJ1aWxkLmZpbGxfc2Jfd2l0aF90YWcoc2IsIFwiYVwiLCB7XHJcbiAgICAgICAgICAgIGF0dHJzOiBocmVmQXR0cnMsXHJcbiAgICAgICAgICAgIGlubmVySHRtbDogY2JEYXRhLmNhcHRpb25cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbGlzKHNiLCBjYkRhdGEpIHtcclxuXHJcbiAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGhidWlsZC5maWxsX3NiX3dpdGhfdGFnKHNiLCBcImxpXCIsIHtcclxuICAgICAgICAgICAgICAgIGNiRGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIGhyZWY6IFwiI1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBcImxpXCIgKyBpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcHRpb246IFwiSXRlbSBcIiArIChpICsgMSlcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhcnJfZm5fb25faW5uZXI6IFthXVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaGJ1aWxkLmZpbGxfc2Jfd2l0aF90YWcoc2IsIFwidWxcIiwge1xyXG4gICAgICAgIGFycl9mbl9vbl9pbm5lcjogW2xpc11cclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBodG1sID0gc2IudG9TdHJpbmcoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhodG1sKTtcclxuICAgICQoXCIjemVpZ2VfaHRtbFwiKS52YWwoaHRtbCk7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRlbnRcIikuaW5uZXJIVE1MID0gaHRtbDtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNhbml0aXplSFRNTChzKSB7XHJcbiAgICB2YXIgZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzKSk7XHJcbiAgICByZXR1cm4gZC5pbm5lckhUTUw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydCgpIHtcclxuICAgIHRlc3RfbWVudSgpO1xyXG59XHJcbiAiLCLvu79pbXBvcnQgaGJ1aWxkX3Rlc3QgPSByZXF1aXJlKFwiLi9oYnVpbGRfdGVzdFwiKTtcblxuaGJ1aWxkX3Rlc3Quc3RhcnQoKTtcbiJdfQ==
